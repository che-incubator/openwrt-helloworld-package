schemaVersion: 2.2.2
metadata:
  generateName: openwrt-helloworld
variables:
  imageRegistry: 'quay.io'
  imageName: 'openwrt-x86-generic-generic-rootfs'
  imageVersion: 'latest'
attributes:
  controller.devfile.io/storage-type: ephemeral
projects:
  - name: openwrt-helloworld
    git:
      remotes:
        origin: https://github.com/che-incubator/openwrt-helloworld-package.git
  - name: openwrt
    zip:
      location: https://github.com/openwrt/openwrt/archive/refs/tags/v23.05.0-rc1.zip
components:
  - name: runtime
    container:
      image: quay.io/che-incubator/openwrt-builder:latest
      memoryLimit: 22G
      memoryRequest: 512Mi
      cpuLimit: 10000m
      cpuRequest: 1000m
      mountSources: true
      env:
        - name: OPENSHIFT_IMAGE_REGISTRY
          value: "image-registry.openshift-image-registry.svc:5000"
        - name: IMAGE
          value: numberguess
        - name: KUBEDOCK_ENABLED
          value: "true"
      endpoints:
        - exposure: public
          name: file-server
          protocol: http
          targetPort: 8080
          path: /bin/targets
commands:
  - id: installpackagedefinitions
    exec:
      label: "Install all package definitions"
      component: runtime
      workingDir: ${PROJECTS_ROOT}/openwrt
      commandLine: "scripts/feeds update -a -f && scripts/feeds install -a -f"
      group:
        kind: build
  - id: linkhelloworldpackage
    exec:
      label: "Link helloworld package"
      component: runtime
      workingDir: ${PROJECTS_ROOT}
      commandLine: "ln -sf openwrt-helloworld/package/helloworld openwrt/package/helloworld"
      group:
        kind: build
  - id: unlinkhelloworldpackage
    exec:
      label: "Unlink helloworld package"
      component: runtime
      workingDir: ${PROJECTS_ROOT}
      commandLine: "unlink openwrt/package/helloworld"
      group:
        kind: build
  - id: copyconfig
    exec:
      label: "Copy diff-config to openwrt"
      component: runtime
      workingDir: ${PROJECTS_ROOT}
      commandLine: "cp -f openwrt-helloworld/configs/.x86-generic.config openwrt/.config"
      group:
        kind: build
  - id: savedifconfig
    exec:
      label: "Save diff-config to openwrt-helloworld"
      component: runtime
      workingDir: ${PROJECTS_ROOT}
      commandLine: "openwrt/scripts/diffconfig.sh > openwrt-helloworld/configs/.x86-generic.config"
      group:
        kind: build
  - id: menuconfig
    exec:
      label: "Select configuration for the toolchain"
      component: runtime
      workingDir: ${PROJECTS_ROOT}/openwrt
      commandLine: "make menuconfig"
      group:
        kind: build
  - id: buildhelloworldpackage
    exec:
      label: "Build helloworld package"
      component: runtime
      workingDir: ${PROJECTS_ROOT}/openwrt
      commandLine: "make package/helloworld/{clean,compile} V=s CONFIG_DEBUG=y"
      group:
        kind: build
  - id: buildallpackages
    exec:
      label: "Build all packages and the kernel"
      component: runtime
      workingDir: ${PROJECTS_ROOT}/openwrt-helloworld
      commandLine: "scripts/build.sh"
      group:
        kind: build
  - id: serverstart
    exec:
      label: "Start the http-server"
      component: runtime
      workingDir: ${PROJECTS_ROOT}/openwrt
      commandLine: "npx http-server -a 0.0.0.0 -p 8080 -o bin/targets"
      group:
        kind: build
  - id: openshift-registry-login
    exec:
      label: Login into OpenShift registry
      component: runtime
      commandLine: podman login --tls-verify=false -u kubeadmin -p $(oc whoami -t) ${OPENSHIFT_IMAGE_REGISTRY} && oc login --token=$(oc whoami -t)
      workingDir: ${PROJECTS_ROOT}
      group:
        kind: build
        isDefault: false
  - id: build-runtime-image
    exec:
      label: Build Runtime Image for Openshift
      component: runtime
      workingDir: ${PROJECTS_ROOT}/openwrt-helloworld
      commandLine: export OPENSHIFT_NS=$(oc project -q) && podman build -f dockerfiles/Dockerfile -t ${OPENSHIFT_IMAGE_REGISTRY}/${OPENSHIFT_NS}/${IMAGE} .
      group:
        kind: build
        isDefault: false
  - id: push-image
    exec:
      label: Push Image into OpenShift registry
      component: runtime
      workingDir: ${PROJECTS_ROOT}
      commandLine: export OPENSHIFT_NS=$(oc project -q) && podman tag ${OPENSHIFT_IMAGE_REGISTRY}/${OPENSHIFT_NS}/${IMAGE} ${OPENSHIFT_IMAGE_REGISTRY}/${OPENSHIFT_NS}/${IMAGE}:latest && podman push --tls-verify=false ${OPENSHIFT_IMAGE_REGISTRY}/${OPENSHIFT_NS}/${IMAGE}:latest
      group:
        kind: build
        isDefault: false